name: CI

on:
  push:
    branches:
      - main
    tags:
      - '*'
  workflow_dispatch:
  pull_request:

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref_name }}
  cancel-in-progress: true

jobs:

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@09d2acae674a48949e3602304ab46fd20ae0c42f # v4.0.0
        with:
          persist-credentials: false
      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: '3.11'
      - run: pip install nox
        name: Install pre-commit
      - run: nox -s lint
        name: Run pre-commit checks

  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, ubuntu-24.04, macos-13, macos-14, macos-15, windows-latest ]
        python_version: ['3.7', '3.8', '3.9', '3.10', '3.11', '3.12', '3.13', 'pypy-3.7', 'pypy-3.8', 'pypy-3.9', 'pypy-3.10', 'pypy-3.11', '3.14']
        exclude:
          - os: macos-14
            python_version: '3.7'
          - os: macos-15
            python_version: '3.7'
          - os: macos-14
            python_version: 'pypy-3.7'
          - os: macos-15
            python_version: 'pypy-3.7'
          - os: ubuntu-24.04
            python_version: '3.7'
          - os: ubuntu-24.04
            python_version: 'pypy-3.7'
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@09d2acae674a48949e3602304ab46fd20ae0c42f # v4.0.0
        with:
          persist-credentials: false
      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: ${{ matrix.python_version }}
          allow-prereleases: true
      - name: Setup dependencies
        run: pip install pytest
      - name: Install mkcert (Linux)
        if: startsWith(matrix.os, 'ubuntu-')
        run: sudo apt-get install mkcert
      - name: Install mkcert (MacOS)
        if: startsWith(matrix.os, 'macos-')
        run: brew install mkcert
      - name: Inject fake CA in TrustStore (MacOS/Linux)
        if: startsWith(matrix.os, 'macos-') || startsWith(matrix.os, 'ubuntu-')
        run: mkcert -install
      - name: Generate a valid certificate
        if: startsWith(matrix.os, 'macos-') || startsWith(matrix.os, 'ubuntu-')
        run: |
          mkcert example.test
          echo "MKCERT_ROOT_CA=$(mkcert -CAROOT)/rootCA.pem" >> $GITHUB_ENV
      - name: Install dependencies
        run: |
          pip install nox
      - name: Run tests
        run: |
          nox -s "test-${{ startsWith(matrix.python_version, 'pypy') && 'pypy' || matrix.python_version }}"
      - name: "Upload artifact"
        uses: "actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02"
        with:
          name: coverage-data-${{ matrix.os }}-${{ matrix.python_version }}
          path: ".coverage.*"
          include-hidden-files: true
          if-no-files-found: error

  coverage:
    if: always()
    runs-on: "ubuntu-latest"
    needs: test
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@09d2acae674a48949e3602304ab46fd20ae0c42f # v4.0.0
        with:
          persist-credentials: false

      - name: "Setup Python"
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.x"

      - name: "Install coverage"
        run: "python -m pip install --upgrade coverage"

      - name: "Download artifact"
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          pattern: coverage-data*
          merge-multiple: true

      - name: "Combine & check coverage"
        run: |
          python -m coverage combine
          python -m coverage html --skip-covered --skip-empty
          python -m coverage report --ignore-errors --show-missing --fail-under=100

      - name: "Upload report"
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: coverage-report
          path: htmlcov

  universal:
    needs:
      - coverage
      - lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@09d2acae674a48949e3602304ab46fd20ae0c42f # v4.0.0
        with:
          persist-credentials: false
      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: python -m pip install build wheel
      - name: Build wheel
        run: python -m build
      - name: Upload sdist
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: wheels-universal
          path: dist/*

  checksum:
    name: compute hashes
    runs-on: ubuntu-latest
    needs: universal
    outputs:
      hashes: ${{ steps.compute.outputs.hashes }}
    steps:
      - uses: actions/checkout@09d2acae674a48949e3602304ab46fd20ae0c42f # v4.0.0
        with:
          persist-credentials: false
      - name: Download distributions
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true
      - name: Collected dists
        run: |
          tree dist
      - name: Generate hashes
        id: compute  #  needs.checksum.outputs.hashes
        working-directory: ./dist
        run: echo "hashes=$(sha256sum * | base64 -w0)" >> $GITHUB_OUTPUT

  provenance:
    needs: checksum
    if: "startsWith(github.ref, 'refs/tags/')"
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@f7dd8c54c2067bafc12ca7a55595d5ee9b75204a  # v2.1.0
    permissions:
      actions: read
      id-token: write
      contents: write
    with:
      base64-subjects: ${{ needs.checksum.outputs.hashes }}
      upload-assets: true
      compile-generator: true

  release:
    name: release
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: provenance
    environment: pypi
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Download distributions
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true
      - name: "Upload dists to GitHub Release"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        run: |
          gh release upload ${{ github.ref_name }} dist/* --repo ${{ github.repository }}
      - name: Publish to PyPI
        uses: "pypa/gh-action-pypi-publish@67339c736fd9354cd4f8cb0b744f2b82a74b5c70" # v1.12.3
